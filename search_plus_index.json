{"./":{"url":"./","title":"介绍","keywords":"","body":"介绍 本文档旨在规范团队中成员的代码风格，以达成团队中成员高效协作的目的。 不足之处，还望指出。本文档会持续更新。 "},"CHANGELOG.html":{"url":"CHANGELOG.html","title":"更新日志","keywords":"","body":"版本更新日志 v1.0.0 搭了基本的book机构，写了前端API适配层规范 v1.1.0 新增了项目目录结构规范 "},"项目目录结构规范.html":{"url":"项目目录结构规范.html","title":"前端项目目录结构及文件命名规范","keywords":"","body":"概述 本文简单描述了前端项目中目录及文件的结构和命名规范。 目录结构 现在前端都是工程化的天下，一般而言，会将整个项目分为源代码和工程配置两部分。源代码应放在/src目录下，而工程配置则一般直接放在项目根目录/下，如webpack, gulp, eslint, babel, postcss, .gitignore， package.json等配置。对于较复杂的工程配置如webpack，我们还会单独给其建一个目录build。 所以大概的目录结构会是这样： │ .babelrc │ .editorconfig │ .eslintignore │ .eslintrc.js │ .gitignore │ .postcssrc.js │ favicon.ico │ index.html │ package-lock.json │ package.json │ ├─.vscode │ settings.json │ ├─build │ build-test.js │ build.js │ check-versions.js │ utils.js │ vue-loader.conf.js │ webpack.base.conf.js │ webpack.dev.conf.js │ webpack.prod.conf.js │ webpack.test.conf.js │ ├─config │ dev.env.js │ index.js │ prod.env.js │ test.env.js │ ├─src │ │ App.vue │ │ main.js │ │ 命名 统一使用kebab-case（短横线）命令法来命名文件夹及文件。如common-utils, build-config。 使用短横线用来分隔单词，能让使用者快速提取关键单词，保证易理解性。 现在很多npm包广泛采用了kebab-case（短横线）命令法。 var gitalk = new Gitalk({ clientID: \"abe61bb2112d4926d0b9\", clientSecret: \"760737a207de2813a6586e1d2c14dd187ddeea64\", repo: \"FE-guide\", owner: \"cumt-robin\", admin: [\"cumt-robin\"], id: decodeURIComponent(location.pathname) }); gitalk.render(\"gitalk-container\"); "},"前端API适配层规范.html":{"url":"前端API适配层规范.html","title":"前端API适配层规范","keywords":"","body":"概述 为了满足统一性和规范性，体现语义化的原则，我对前端的接口适配层提出了一种约束方式，基本上是符合RESTful API的原则的。 微服务架构 首先，为了对齐后端微服务架构，在前端将API调用分为三个模块。 ├─base 负责调用basecenterweb服务 ├─eqp 负责调用eqpcenterweb服务 └─user 负责调用ucenterweb服务 每个模块下都定义了统一的微服务命名空间，例如/src/api/base/index.js： export const namespace = 'basecenterweb'; 特性案例 每个功能特性都有独立的js模块，以角色管理相关接口为例，路径是/src/api/user/role.js import api from '../api' import { rejectNull } from \"../../utils/helper\"; import { namespace } from \"./index\" // 特性命名空间 const feature = 'role' // 添加 export const addRole = params => api.post(`/${namespace}/${feature}/add`, rejectNull(params)); // 删除 export const deleteRole = params => api.deletes(`/${namespace}/${feature}/delete`, params); // 更新 export const updateRole = params => api.put(`/${namespace}/${feature}/update`, rejectNull(params)); // 条件查询 export const findRoles = params => api.get(`/${namespace}/${feature}/find`, params); // 查询所有记录 export const getAllRoles = () => findRoles(); // 获取详情 export const getRoleDetail = params => api.get(`/${namespace}/${feature}/detail`, params); // 分页 export const getRolePage = params => api.get(`/${namespace}/${feature}/page`, rejectNull(params)); // 搜索 export const searchRole = params => params.wd ? api.get(`/${namespace}/${feature}/search`, rejectNull(params)) : getRolePage(params); 每一条接口都根据RESTful风格，调用增（api.post）删（api.deletes）改（api.put）查（api.get）的底层方法。 调用的url由三部分组成，格式：/微服务命名空间/特性命名空间/方法 接口适配层函数命名规范： 新增：addXXX 删除：deleteXXX 更新：updateXXX 根据ID查询记录：getXXXDetail 条件查询一条记录：findOneXXX 条件查询：findXXXs 查询所有记录：getAllXXXs 分页查询：getXXXPage 搜索：searchXXX 注：请按照以上规范执行，让接口维护变得简单。 var gitalk = new Gitalk({ clientID: \"abe61bb2112d4926d0b9\", clientSecret: \"760737a207de2813a6586e1d2c14dd187ddeea64\", repo: \"FE-guide\", owner: \"cumt-robin\", admin: [\"cumt-robin\"], id: decodeURIComponent(location.pathname) }); gitalk.render(\"gitalk-container\"); "},"HTML编码规范.html":{"url":"HTML编码规范.html","title":"HTML编码规范","keywords":"","body":"HTML编码规范 TODO var gitalk = new Gitalk({ clientID: \"abe61bb2112d4926d0b9\", clientSecret: \"760737a207de2813a6586e1d2c14dd187ddeea64\", repo: \"FE-guide\", owner: \"cumt-robin\", admin: [\"cumt-robin\"], id: decodeURIComponent(location.pathname) }); gitalk.render(\"gitalk-container\"); "},"CSS编码规范.html":{"url":"CSS编码规范.html","title":"CSS编码规范","keywords":"","body":"CSS编码规范 TODO var gitalk = new Gitalk({ clientID: \"abe61bb2112d4926d0b9\", clientSecret: \"760737a207de2813a6586e1d2c14dd187ddeea64\", repo: \"FE-guide\", owner: \"cumt-robin\", admin: [\"cumt-robin\"], id: decodeURIComponent(location.pathname) }); gitalk.render(\"gitalk-container\"); "},"Javascript编码规范.html":{"url":"Javascript编码规范.html","title":"Javascript编码规范","keywords":"","body":"Javascript编码规范 TODO var gitalk = new Gitalk({ clientID: \"abe61bb2112d4926d0b9\", clientSecret: \"760737a207de2813a6586e1d2c14dd187ddeea64\", repo: \"FE-guide\", owner: \"cumt-robin\", admin: [\"cumt-robin\"], id: decodeURIComponent(location.pathname) }); gitalk.render(\"gitalk-container\"); "},"Vue编码规范.html":{"url":"Vue编码规范.html","title":"Vue编码规范","keywords":"","body":"Vue编码规范 TODO var gitalk = new Gitalk({ clientID: \"abe61bb2112d4926d0b9\", clientSecret: \"760737a207de2813a6586e1d2c14dd187ddeea64\", repo: \"FE-guide\", owner: \"cumt-robin\", admin: [\"cumt-robin\"], id: decodeURIComponent(location.pathname) }); gitalk.render(\"gitalk-container\"); "}}